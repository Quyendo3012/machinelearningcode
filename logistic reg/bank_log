from __future__ import print_function 
import numpy as np 
import pandas as pd
from sklearn.metrics import precision_score,mean_absolute_error, recall_score, f1_score
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn import preprocessing 

data= pd.read_csv('bankmarketing.csv')
le=preprocessing.LabelEncoder() #Chuyển đổi các nhãn thành dữ liệu số nguyên
data=data.apply(le.fit_transform) 
dt_Train, dt_Test = train_test_split(data, test_size=0.3, shuffle = True) #cắt data thành 30% test và 70% train, ko ngẫu nhiên
X_train = dt_Train.iloc[:, :5]  #bỏ cột id với species lấy dữ liệu ở các cột còn lại
y_train = dt_Train.iloc[:, 5]  # lấy cột species
X_test= dt_Test.iloc[:, :5]  #bỏ cột id với species lấy dữ liệu ở các cột còn lại
y_test= dt_Test.iloc[:, 5]   # lấy cột species
y_test = np.array(y_test)
#Xây dựng cây ( dùng độ đo Entropy: độ không chắc chắn , max_depth : độ sâu tối đa ,
# min_samples_leaf=10 : số data point ở nút lá ít nhất là 10 nếu nhỏ hơn 10 không được phân nhánh )
clf = LogisticRegression( penalty='l2', max_iter=590023, C= 0.1, solver="newton-cg", class_weight='balanced', random_state=2, verbose=1).fit(X_train, y_train) #huan luyen mo hinh
y_pred = clf.predict(X_test) #đưa ra giá trị dự đoán X_Test

print("Thực tế \t Dự đoán")
for i in range (0, len(y_test)):
    print("%.5s" % y_test[i], "\t\t", y_pred[i])
count = 0
for i in range(0,len(y_test)): #tìm số lần dự đoán chính xác trong các dự đoán
    if(y_test[i] == y_pred[i]):# nếu i test  bằng y dự đoán 
        count = count + 1 #nếu dự đoán chính xác thì cộng 1

print('Tỷ lệ dự đoán đúng:', np.around(count/len(y_pred)*100,10), "%")
# print("Độ đo Precision:",precision_score(y_test, y_pred, average ='macro')) # Precision (độ chuẩn xác) tỉ lệ số điểm Positive (dự đoán đúng) / tổng số điểm mô hình dự đoán là Positive
# #càng cao càng tốt tức là tất cả số điểm đều đúng 
# print("Độ đo Recall:",recall_score(y_test, y_pred, average ='micro')) #Recall tỉ lệ số điểm Positive mô hình dự đoán đúng trên tổng số điểm được gán nhãn là Positive ban đầu
# #Recall càng cao, tức là số điểm là positive bị bỏ sót càng ít
# #micro tbc của precision và recall theo các lớp.
# print("Độ đo F1:", f1_score(y_test, y_pred, average='macro'))



